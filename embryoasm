 References:https://m.freebuf.com/articles/database/321326.html
        -
        level1-solution1
//First type ipython and type the below code. 

from pwn import *

# set some context
context.arch = "amd64"
context.encoding = "latin"
# ignore warnings
warnings.simplefilter("ignore")

# assembly goes here, most of the rest is boilerplate
assembly = """
mov rdi, 0x1337
"""

# the hostname will always be the same as challenge binary
with process(f"/challenge/{os.getenv('HOSTNAME')}") as target:
    info( target.readrepeat(1) )
    target.send( asm(assembly) )
    info( target.readrepeat(1) )
       
        level1-solution2
asm -c amd64 "mov rdi, 0x1337" | /challenge/embryoasm_level1
        flag level1
pwn.college{MNXbbM_4BHriQbN4jDCAjPWx3IT.QX0kTMsADOzQzW}


        level2-solution1 
change the assembly part of the level1-solution1
        level2-solution2
asm -c amd64 "add rdi, 0x331337" | /challenge/embryoasm_level2       
        flag level2
flag= pwn.college{YXKND95czj9WomYOQxpMBmIn8kp.QX1kTMsADOzQzW}
        
        
        level3-soln1
from pwn import *

# set some context
context.arch = "amd64"
context.encoding = "latin"
# ignore warnings
warnings.simplefilter("ignore")

# assembly goes here, most of the rest is boilerplate
assembly = """
mov rax, rdi
// multiply will put the overflow into rdx,
// so save it
mov rcx, rdx
mul rsi
add rax, rcx
"""

# the hostname will always be the same as challenge binary
with process(f"/challenge/{os.getenv('HOSTNAME')}") as target:
    info( target.readrepeat(1) )
    target.send( asm(assembly) )
    info( target.readrepeat(1) )
    
        level3-soln2
asm -c amd64 "mov rax, rdi
mov rcx, rdx
mul rsi
add rax, rcx" | /challenge/embryoasm_level3

flag=pwn.college{AV6hMHToKl8suDvzJC_LitVap33.QX2kTMsADOzQzW}

        level4-soln1
similar to level1 just change the assembly part to the below
        level4-soln2
asm -c amd64 "mov rax, rdi
div rsi" | /challenge/embryoasm_leve4

flag=pwn.college{c2hLYqoC-y4lzdLnIwWmX1TgxiR.QX3kTMsADOzQzW}

        level5-soln1
similar to level1 just change the assembly part to the below
        level5-soln2
asm -c amd64 "mov rax, rdi
div rsi                               
mov rax, rdx" | /challenge/embryoasm_level5

flag=pwn.college{gNaNQWgLQa0Kkte_G22woxwk8fv.QX4kTMsADOzQzW}

        level6-soln1

 -Didn't understand what happened
Solution Code: https://github.com/reusedbottle/flags/blob/main/pwn.college/embryoasm/6.py

        level7-soln1
-Didn't understand what happened
Solution Code: https://github.com/reusedbottle/flags/blob/main/pwn.college/embryoasm/7.py
        
        level 8
asm -c amd64 "xor rax, rax
or rax, rdi
and rax, rsi" | /challenge/embryoasm_level8

flag=pwn.college{4vcBB0g5hhnn-zO85Yiu96iAS7V.QXxAjMsADOzQzW}

        level 9
asm -c amd64 "xor rax, rax
or rax, rdi
and rax, 1
xor rax, 1" | /challenge/embryoasm_level9
Comment:rax is 1 if rdi is even, else 0. So we check if rdi is 0 or 1.

        level 10
 //you store the value in 0x404000 to rax. Then add 0x1337 to the original value. The value in the address 0x404000 is different from the value in rax.
//you should use registers to add or store the address.
asm -c amd64 "mov rsp, 0x404000
mov rax, [rsp]
mov rcx, 0x1337
add [rsp], rcx" | /challenge/embryoasm_level10

flag=pwn.college{kD2qA1XYxOPeHc-TRzMyX_Caq0a.QXzAjMsADOzQzW}

        level 11
asm -c amd64 "mov rsp, 0x404000
mov al, [rsp]
mov bx, [rsp]
mov ecx, [rsp]
mov rdx, [rsp]" | /challenge/embryoasm_level11

flag=pwn.college{sPTmfUgoNur-pgjK_wpR_yMOBc0.QX0AjMsADOzQzW}

        level 12
asm -c amd64 "mov rcx, 0xDEADBEEF00001337
mov rdx, 0x000000C0FFEE0000
mov [rdi], rcx
mov [rsi], rdx" | /challenge/embryoasm_level12

flag=pwn.college{kTZRhaNIs63HUY171G27zRBbeQ9.QX1AjMsADOzQzW}

        level 13

asm -c amd64 "mov rax, [rdi]
mov rbx, [rdi+8]
add rax, rbx
mov [rsi], rax" | /challenge/embryoasm_level13

        level 14
//subtracting from the top of the stack
asm -c amd64 "sub [rsp], rdi" | /challenge/embryoasm_level14

flag=pwn.college{4aXkvLcH74c7UJLbSNTo8FKmVT8.QX3AjMsADOzQzW}

        level 15
asm -c amd64 "push rdi
push rsi
pop rdi
pop rsi" | /challenge/embryoasm_level15

flag=pwn.college{guoqFpMCDso0CCLez4QoCmTeN7A.QX4AjMsADOzQzW}

        level 16
//don't forget you can't directly do div 4, you need to assign 4 to a register value
asm -c amd64 "mov rax, [rsp];
add rax, [rsp+8]
add rax, [rsp+16]
add rax, [rsp+24]
mov rbx, 4
div rbx
push rax" | /challenge/embryoasm_level16

flag=pwn.college{UrhZADFwCRLG-ifRG9YHFci5Mle.QX5AjMsADOzQzW}

        level 17
//.rept :- u first specify how many times you want it to repeat then what you want it to repeat
//.endr :- end
asm -c amd64 "jmp next
        .rept 0x51
                nop
        .endr
next:
        mov rdi,[rsp]
        mov r12,0x403000
        jmp r12" | /challenge/embryoasm_level17

flag=pwn.college{ck7Jd9JAEKCTUvFdrRwkz7Ve0tt.QXwEjMsADOzQzW}

        level 18

better solution=https://m.freebuf.com/articles/database/321326.html
// x = rdi, y = rax
// if [x] is 0x7f454c46 ....
// dword ptr :- converts it into a 32 bit:
        //http://www.c-jump.com/CIS77/ASM/Instructions/I77_0250_ptr_pointer.htm

asm -c amd64 "cmp dword ptr [rdi], 0x7f454c46
jne else_if
jmp if
if:
    xor rax, rax
    add eax, dword ptr [rdi+4]
    add eax, dword ptr [rdi+8]
    add eax, dword ptr [rdi+12]
    jmp exit
else_if:
    cmp dword ptr [rdi], 0x00005A4D
    jne else
    mov eax, dword ptr [rdi+4]
    sub eax, dword ptr [rdi+8]
    sub eax, dword ptr [rdi+12]
    jmp exit
else:
    mov rax, 1
    mul dword ptr [rdi+4]
    mul dword ptr [rdi+8]
    mul dword ptr [rdi+12]
    jmp exit
exit:
    nop" | /challenge/embryoasm_level18
flag=pwn.college{wRDz_COxY1zBd7c0ksykHM18DDN.QXxEjMsADOzQzW}

        level 19

//if rdi is greater tha 3, whatever the value of rdi is you move to a single address [rsi+32]

asm -c amd64 "cmp rdi, 3
jg default
// rax = rdi * 8
mov rax, rdi
mov rbx, 8
mul rbx
// rax = rsi + rdi * 8
add rax, rsi
jmp [rax]
default:
    jmp [rsi+32]" | /challenge/embryoasm_level19

flag=pwn.college{4wJ-6rFUlRotvSDGkYGg95jC4qL.QXyEjMsADOzQzW}
    
        level 20
 
//i=rbx
//n=rsi
//sum=rax
asm -c amd64 "xor rax, rax
xor rbx, rbx

for:
    cmp rbx, rsi
    jge finish
    add rax, [rdi]
    add rdi, 8
    inc rbx
    jmp for
 finish:
    div rsi" | /challenge/embryoasm_level20
 
 flag=pwn.college{kg6d4hGNMtMEtKGxmTtxqGZHDY7.QXzEjMsADOzQzW}
 
         level 21
//decided to jump this one because it is a while loop
 asm -c amd64 "cmp rdi, 0
je rdi_zero
jmp count
count:
    mov rsi, [rdi]
    cmp rsi, 0
    je end
    inc rax
    inc rdi
    jmp count
rdi_zero:
    xor rax, rax
end:
    nop" | /challenge/embryoasm_level21

flag=pwn.college{4wJ-6rFUlRotvSDGkYGg95jC4qL.QXyEjMsADOzQzW}
